# values referenced in other properties
hadoop.namenode.hostname=visallo-dev
zookeeper.hostnames=visallo-dev
accumulo.instanceName=visallo

hadoop.url=hdfs://${hadoop.namenode.hostname}:8020
zookeeper.serverNames=${zookeeper.hostnames}
dfs.client.use.datanode.hostname=true

# optionally run functions within the web app that are run with YARN in production
# webAppEmbedded.longRunningProcessRunner.enabled=true
# webAppEmbedded.longRunningProcessRunner.threadCount=1
# webAppEmbedded.graphPropertyWorkerRunner.enabled=true
# webAppEmbedded.graphPropertyWorkerRunner.threadCount=1
# webAppEmbedded.externalResourceRunner.enabled=true

# load plugins and other .jar files from a directory in HDFS
# hdfsLib.sourceDirectory=hdfs://${hadoop.namenode.hostname}/visallo/lib

# application privileges granted to new users by default
newuser.privileges=READ,COMMENT,EDIT,PUBLISH,ADMIN

web.cacheServletFilter.maxAge=3600

# "CONFIDENTIAL" to require HTTPS to access the web application
# http.transportGuarantee=CONFIDENTIAL

# web.ui defaults defined in web/web-base/src/main/java/org/visallo/web/WebConfiguration.java

# repositories
simpleOrmSession=com.v5analytics.simpleorm.AccumuloSimpleOrmSession
repository.user=org.visallo.vertexium.model.user.VertexiumUserRepository
repository.workspace=org.visallo.vertexium.model.workspace.VertexiumWorkspaceRepository
repository.longRunningProcess=org.visallo.vertexium.model.longRunningProcess.VertexiumLongRunningProcessRepository
repository.authorization=org.visallo.vertexium.model.user.AccumuloAuthorizationRepository
repository.trace=org.visallo.vertexium.trace.AccumuloTraceRepository
repository.ontology=org.visallo.vertexium.model.ontology.VertexiumOntologyRepository
repository.workQueue=org.visallo.model.rabbitmq.RabbitMQWorkQueueRepository
rabbitmq.addr.0.host=visallo-dev
#repository.http=org.visallo.core.http.HttpRepository

# how may queue items to consume to work on at a time, 0 is unlimited
#rabbitmq.prefetch.count=10

# prefix to use to distinguish sets of queues
#queue.prefix

# prefix to use to distinguish sets of locks
#lockRepository.pathPrefix=/visallo/locks

# how to send email
#repository.email=org.visallo.core.email.SmtpEmailRepository
#repository.email.smtp.serverHostname=localhost
#repository.email.smtp.serverPort=25

#org.visallo.core.formula.FormulaEvaluator.max.threads=1

# visibility plugin
security.visibilityTranslator=org.visallo.core.security.DirectVisibilityTranslator
audit.visibilityLabel=audit

# how many results to return when searching
#search.defaultSearchCount=100

# SimpleORM using Accumulo
simpleOrm.accumulo.instanceName=${accumulo.instanceName}
simpleOrm.accumulo.zookeeperServerNames=${zookeeper.hostnames}
simpleOrm.accumulo.username=root
simpleOrm.accumulo.password=password
simpleOrm.tablePrefix=visallo_

# Vertexium storage and search providers
graph=org.vertexium.accumulo.AccumuloGraph
graph.hdfsContextClasspath=/opt/visallo/lib/.*.jar
graph.accumuloInstanceName=${accumulo.instanceName}
graph.username=root
graph.password=password
graph.tableNamePrefix=visallo_vertexium
graph.zookeeperServers=${zookeeper.hostnames}
graph.serializer=org.vertexium.accumulo.serializer.kryo.QuickKryoValueSerializer
graph.idgenerator=org.vertexium.id.UUIDIdGenerator
graph.search=org.vertexium.elasticsearch.ElasticsearchSingleDocumentSearchIndex
graph.search.locations=visallo-dev
graph.search.indexName=vertexium
graph.hdfs.rootDir=hdfs://${hadoop.namenode.hostname}
graph.hdfs.dataDir=/visallo/vertexium
graph.dfs.client.use.datanode.hostname=${dfs.client.use.datanode.hostname}

# OpenCV object detection
objectdetection.classifierConcepts=face
objectdetection.classifier.face.path=/visallo/config/opencv/haarcascade_frontalface_alt.xml

# OpenNLP term extraction
termextraction.opennlp.pathPrefix=/visallo/config/opennlp/

# location in HDFS of IP address geolocation .csv files
#org.visallo.geoip.GeoIpGraphPropertyWorker.pathPrefix=/visallo/config/org.visallo.geoip.GeoIpGraphPropertyWorker/

org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.image.regex=image.*
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.image.intent=image
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.audio.regex=audio.*
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.audio.intent=audio
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.video.regex=video.*
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.video.intent=video
org.visallo.mimeTypeOntologyMapper.MimeTypeOntologyMapperGraphPropertyWorker.mapping.default.intent=document
